# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-01-02 16:05+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: lang
#: index.md:1
#, no-wrap
msgid "fr"
msgstr ""

#. type: YAML Front Matter: lang-niv
#: index.md:1
#, no-wrap
msgid "fonto"
msgstr ""

#. type: YAML Front Matter: lang-ref
#: index.md:1
#, no-wrap
msgid "001-ĉefa-afero"
msgstr ""

#. type: YAML Front Matter: layout
#: index.md:1
#, no-wrap
msgid "page"
msgstr ""

#. type: YAML Front Matter: slug
#: index.md:1
#, no-wrap
msgid "L'essentiel!"
msgstr ""

#. type: YAML Front Matter: title
#: index.md:1
#, no-wrap
msgid "L'essentiel"
msgstr ""

#. type: Title #
#: index.md:10
#, no-wrap
msgid "_flash\\_cc2531_"
msgstr ""

#. type: Plain text
#: index.md:12
#, no-wrap
msgid " _flash\\_cc2531_ vous permet de programmer votre clé USB CC2531 à partir de votre _Raspberry_, sans avoir besoin d'un _Arduino_ ou d'un _CC Debugger_.\n"
msgstr ""

#. type: Title ##
#: index.md:13
#, no-wrap
msgid "Conditions préalables"
msgstr ""

#. type: Plain text
#: index.md:14
#, no-wrap
msgid "Vous avez besoin d'un _Raspberry_ ou d'un _Odroid-c2_.  \n"
msgstr ""

#. type: Plain text
#: index.md:16
#, no-wrap
msgid ""
"Vous avez besoin de quoi connecter le port de débogage de la clé aux ports _GPIO_ du _Raspberry_, par exemple un câble _CC_ et quatre lignes _Dupont_ (voir plus loin).   \n"
"[WiringPi](http://wiringpi.com/) doit être installé (s'il n'est pas pré-installé, vous pouvez généralement l'installer avec `sudo apt install wiringpi`, sinon voir [le site Web de _Gordon_](http://wiringpi.com/) ou [ce site alternatif](https://github.com/WiringPi/WiringPi)).  \n"
msgstr ""

#. type: Plain text
#: index.md:19
#, no-wrap
msgid ""
"J'ai conçu _flash\\_cc2531_ sur un _Raspberry Pi 3_ avec _raspbian_, mais des programmations réussies ont été signalés sur d'autres modèles:\n"
"* sur pi 4, vous aurez besoin de la version 2.52 de _wiringpi_ :  [installer _wiringPi_ 2.52 depuis le site Web de _Gordon_](http://wiringpi.com/wiringpi-updated-to-2-52-for-the-raspberry-pi-4b/)  \n"
msgstr ""

#. type: Bullet: '* '
#: index.md:20
#, no-wrap
msgid "sur pi 1 et pi 2, vous aurez besoin d'[utiliser d'autres broches](#uzu_aliajn_pinglojn).  \n"
msgstr ""

#. type: Bullet: '* '
#: index.md:24
#, no-wrap
msgid "dans tous les cas, vous devrez probablement ajuster l'option de base de temps ( _\"-m\"_ ).\n"
msgstr ""

#. type: Title ##
#: index.md:27
#, no-wrap
msgid "Préparation"
msgstr ""

#. type: Plain text
#: index.md:30
#, no-wrap
msgid "Téléchargez _flash\\_cc2531_ sur votre _raspberry_:\n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:30
#, no-wrap
msgid "git clone https://github.com/jmichault/flash_cc2531.git\n"
msgstr ""

#. type: Plain text
#: index.md:34
#, no-wrap
msgid "Connectez les broches suivantes du port de débogage au port GPIO:\n"
msgstr ""

#. type: Bullet: '1. '
#: index.md:39
#, no-wrap
msgid "broche 1 ( _GND_ ) -> broche 39 ( _GND_ )\n"
msgstr ""

#. type: Bullet: '2. '
#: index.md:39
#, no-wrap
msgid "broche 7 ( _reset_ ) -> broche 35 ( _wPi 24, BCM19_ )\n"
msgstr ""

#. type: Bullet: '3. '
#: index.md:39
#, no-wrap
msgid "broche 3 ( _DC_ ) -> broche 36 ( _wPi 27, BCM16_ )\n"
msgstr ""

#. type: Bullet: '4. '
#: index.md:39
#, no-wrap
msgid "broche 4 ( _DD_ ) -> broche 38 ( _wPi 28, BCM20_ )\n"
msgstr ""

#. type: Plain text
#: index.md:41
#, no-wrap
msgid "et insérez la clé USB dans un port.\n"
msgstr ""

#. type: Plain text
#: index.md:45
#, no-wrap
msgid ""
"Un câble de téléchargement _CC_ et 4 lignes _Dupont_ Femelle à Femelle sont parfaits à cet effet:\n"
"![photo de la clé et de la _framboise_](https://github.com/jmichault/files/raw/master/Raspberry-CC2531.jpg)\n"
"C'est mon option préférée, mais si vous n'avez pas de câble _CC_ vous pouvez aussi souder directement les câbles _Dupont_ sur la clé : voir par exemple le site [ _mariva.com_](https://lemariva.com/blog/2019/08/zigbee-flashing-cc2531-using-raspberry-pi-without-cc-debugger) ou [ _notenoughtech.com_](https://notenoughtech.com/home-automation/flashing-cc2531-without-cc-debugger/)\n"
msgstr ""

#. type: Plain text
#: index.md:48
#, no-wrap
msgid "testez en exécutant ceci :\n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:48
#, no-wrap
msgid ""
"cd flash_cc2531\n"
"./cc_chipid\n"
msgstr ""

#. type: Plain text
#: index.md:53
#, no-wrap
msgid "Ça doit retourner:\n"
msgstr ""

#. type: Fenced code block
#: index.md:53
#, no-wrap
msgid "  ID = b524.\n"
msgstr ""

#. type: Plain text
#: index.md:60
#, no-wrap
msgid ""
"Si vous voyez 0000 ou ffff quelque chose ne va pas:\n"
"* vérifiez d'abord votre câblage.\n"
"* puis essayez un temps de base plus élevé, par exemple avec `./cc_chipid -m 100`, ou `./cc_chipid -m 160` ou `./cc_chipid -m 300`.\n"
"* si rien de tout cela ne fonctionne, essayez de recompiler avec `make`.\n"
msgstr ""

#. type: Title ##
#: index.md:62
#, no-wrap
msgid "utilisation"
msgstr ""

#. type: Plain text
#: index.md:64
#, no-wrap
msgid "Pour enregistrer le contenu de la mémoire flash dans le fichier save.hex:\n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:64
#, no-wrap
msgid "./cc_read save.hex\n"
msgstr ""

#. type: Plain text
#: index.md:68
#, no-wrap
msgid "(dure environ 1 minute).\n"
msgstr ""

#. type: Plain text
#: index.md:70
#, no-wrap
msgid "Pour effacer la mémoire flash:\n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:70
#, no-wrap
msgid "./cc_erase\n"
msgstr ""

#. type: Plain text
#: index.md:74
#, no-wrap
msgid "**Remarque:** Vous **devez** effacer avant d'écrire (sauf si vous savez vraiment ce que vous allez faire).\n"
msgstr ""

#. type: Plain text
#: index.md:76
#, no-wrap
msgid "Pour programmer le fichier sur la clé _CC2531_:\n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:76
#, no-wrap
msgid "./cc_write CC2531ZNP-Prod.hex\n"
msgstr ""

#. type: Plain text
#: index.md:80
#, no-wrap
msgid "(dure environ 3 minutes).\n"
msgstr ""

#. type: Plain text
#: index.md:82
#, no-wrap
msgid "<a id=\"uzu_aliajn_pinglojn\"></a>\n"
msgstr ""

#. type: Title ##
#: index.md:82
#, no-wrap
msgid "Utilisez d'autres broches"
msgstr ""

#. type: Plain text
#: index.md:88
#, no-wrap
msgid ""
"toutes les commandes acceptent les arguments suivants:\n"
"* _-c_ broche : change la broche _DC_ (par défaut 27)\n"
"* _-d_ broche : change la broche _DD_ (par défaut 28)\n"
"* _-r_ broche : change la broche _reset_ (par défaut 24)\n"
"* _-m_ : change le multiplicateur du délai, et donc le temps de base (par défaut : ajustement automatique)\n"
msgstr ""

#. type: Plain text
#: index.md:90
#, no-wrap
msgid "la numérotation des broches utilisée est celle de _wiringPi_. Utilisez `gpio readall` pour avoir la disposition dans votre _Raspberry_ (colonne _wPi_).\n"
msgstr ""

#. type: Plain text
#: index.md:97
#, no-wrap
msgid ""
"Par exemple, si vous souhaitez utiliser les broches 3, 11 et 13: \n"
"Connectez les broches suivantes d'un port de débogage à une porte _GPIO_:\n"
"1. broche 1 ( _GND_ ) -> broche 14 ( _GND_ )\n"
"2. broche 7 ( _reset_ ) -> broche 3 ( _wPi 8, BCM2_ )\n"
"3. broche 3 ( _DC_ ) -> broche 11 ( _wPi 0, BCM17_ )\n"
"4. broche 4 ( _DD_ ) -> broche 13 ( )_wPi 2, BCM27_ )\n"
msgstr ""

#. type: Plain text
#: index.md:99
#, no-wrap
msgid "et maintenant vous pouvez lire l'ID, sauvegarder , effacer et écrire la mémoire flash avec les commandes suivantes:\n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:99
#, no-wrap
msgid ""
"./cc_chipid -r 8 -c 0 -d 2\n"
"./cc_read -r 8 -c 0 -d 2 save.hex\n"
"./cc_erase -r 8 -c 0 -d 2\n"
"./cc_write -r 8 -c 0 -d 2 CC2531ZNP-Prod.hex\n"
msgstr ""

#. type: Plain text
#: index.md:107
#, no-wrap
msgid "Vous pouvez également changer les valeurs par défaut dans _CCDebugger.h_ puis compiler les programmes avec `make`.\n"
msgstr ""

#. type: Title ##
#: index.md:108
#, no-wrap
msgid "et si ça ne marche pas?"
msgstr ""

#. type: Bullet: '1. '
#: index.md:111
#, no-wrap
msgid "arrêtez tous les autres programmes.\n"
msgstr ""

#. type: Bullet: '2. '
#: index.md:111
#, no-wrap
msgid "fixez la vitesse du processeur avant la programmation. Exemple:  \n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:112
#, no-wrap
msgid "sudo echo performance >/sys/devices/system/cpu/cpu0/cpufreq/scaling_governor\n"
msgstr ""

#. type: Bullet: '3. '
#: index.md:115
#, no-wrap
msgid "utilisez l'option -m pour augmenter les délais utilisés. Exemple:  \n"
msgstr ""

#. type: Fenced code block (bash)
#: index.md:116
#, no-wrap
msgid "./cc_write -m 300 CC2531ZNP-Prod.hex\n"
msgstr ""

#. type: Bullet: '4. '
#: index.md:120
#, no-wrap
msgid "recompilez le logiciel avec `make`.\n"
msgstr ""

#. type: Title ##
#: index.md:121
#, no-wrap
msgid "Licence"
msgstr ""

#. type: Plain text
#: index.md:123
#, no-wrap
msgid "Ce projet est sous licence GPL v3 (voir _COPYING_).\n"
msgstr ""
